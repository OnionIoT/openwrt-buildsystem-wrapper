# This pipeline create a new pipeline in AWS CodePipeline if the branch follows the desired pattern defined in BRANCH_PATTERN.
name: New branch created

on:
  create:
    branches:
      - 'openwrt-2*'

env:
  BRANCH_PATTERN: openwrt-2[0-9]\.[0-9]{2}
  TERRAFORM_VERSION: 1.7.4

jobs:
  branch_created:
    name: Branch Created
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      
      - name: Get branch name
        run: echo "BRANCH_NAME=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_ENV
      
      - name: Verify branch name
        run: |
          if [[ ! "${BRANCH_NAME}" =~ $BRANCH_PATTERN ]]; then
            echo "Branch name doesn't match the pattern."
            echo "VALID_BRANCH=false" >> $GITHUB_ENV
          else
            echo "New branch created $GITHUB_REF"
            echo "VALID_BRANCH=true" >> $GITHUB_ENV
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: $TERRAFORM_VERSION
          
      - name: Terraform Init
        if: env.VALID_BRANCH == 'true'
        run: |
          cd .terraform/pipeline
          terraform init

      - name: Terraform Format
        if: env.VALID_BRANCH == 'true'
        run: |
          cd .terraform/pipeline
          terraform fmt -check

      - name: Terraform Validate
        if: env.VALID_BRANCH == 'true'
        run: |
          cd .terraform/pipeline
          terraform validate -no-color
        
      - name: Terraform Workspace 
        if: env.VALID_BRANCH == 'true'
        run: |
          cd .terraform/pipeline
          terraform workspace new $BRANCH_NAME

      - name: Terraform Workspace Select
        if: env.VALID_BRANCH == 'true'
        run: |
          cd .terraform/pipeline
          terraform workspace select $BRANCH_NAME

      - name: Terraform Plan
        if: env.VALID_BRANCH == 'true'
        run: |
          cd .terraform/pipeline
          terraform plan -out=tfplan -var="stage_vars={${BRANCH_NAME}={branch=\"${BRANCH_NAME}\"}"

      # - name: Terraform Apply
      #   if: env.VALID_BRANCH == 'true'
      #   run: |
      #     cd .terraform/pipeline
      #     terraform apply tfplan

      - name: NOTHING TO DO
        if: env.VALID_BRANCH == 'false'
        run: echo "THIS BRANCH DOES NOT CREATE A NEW AWS CODEPIPELINE"